name: CI Pipeline

on:
  push:
    branches: ["main", "dev", "feature/carlos"]
  pull_request:
    branches: ["main", "dev"]

jobs:
# -------------JOB 1: Unit Tests --------------------------
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: services/auth-service

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configurar Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.6'

      - name: Instalación de dependencias
        run: go mod tidy
      
      - name: Ejecución de pruebas unitarias
        run: go test ./... -v -cover -short

# -----------JOB 2: Integration test-----------------------
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    defaults:
      run:  
        working-directory: services/auth-service

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpsw
          POSTGRES_DB: anb_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U testuser -d anb_test"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configurar Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.6'
      
      - name: Instalar dependencias
        run: go mod tidy

      - name: Instalar cliente Postgres
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Verificar conexión a Postgres
        env:
          PGPASSWORD: testpsw
        run: |
          echo "Intentando conexión a Postgres..."
          for i in {1..5}; do
            psql -h 127.0.0.1 -U testuser -d anb_test -c '\l' && break
            echo "Postgres aún no responde, reintentando en 3s..."
            sleep 3
          done

      - name: Ejecutar pruebas de integración
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          DB_USER: testuser
          DB_PASSWORD: testpsw
          DB_NAME: anb_test
          SERVER_PORT: 8080
          JWT_SECRET: Secret_for_tests

        run: go test ./test/integration/... -v -cover -tags=integration

# -----------JOB 3: Build Docker Image-----------------------      
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: integration-tests

    defaults:
      run:
        working-directory: services/auth-service

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build docker image
        run: docker build -t auth-service:ci .

      - name: Test Docker Container
        run: docker run --rm auth-service:ci

#----------JOB 4: SonarCloud Scan-----------------------------
  sonarcloud:
    name: SonarCloud Scan
    runs-on: ubuntu-latest
    needs: integration-tests

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}